import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { AgentPubKey, EntryHash, ActionHash, Record, AppAgentClient } from '@holochain/client';
import { consume } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import { clientContext } from '../../contexts';
import '@material/mwc-circular-progress';
import './{{kebab_case to_referenceable.name}}-detail';

@customElement('{{kebab_case (plural to_referenceable.name)}}-for-{{kebab_case from_referenceable.name}}')
export class {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} extends LitElement {
  @consume({ context: clientContext })
  client!: AppAgentClient;
  
  @property({
    hasChanged: (newVal: {{from_referenceable.hash_type}}, oldVal: {{from_referenceable.hash_type}}) => newVal?.toString() !== oldVal?.toString()
  })
  {{camel_case from_referenceable.singular_arg}}!: {{from_referenceable.hash_type}}; 

  _fetch{{pascal_case (plural to_referenceable.name)}} = new Task(this, ([{{camel_case from_referenceable.singular_arg}}]) => this.client.callZome({
      cap_secret: null,
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}',
      payload: {{camel_case from_referenceable.singular_arg}},
  }) as Promise<Array<Record>>, () => [this.{{camel_case from_referenceable.singular_arg}}]);

  renderList(records: Array<Record>) {
    if (records.length === 0) return html`<span>No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${records.map(record => 
          html`<{{kebab_case to_referenceable.name}}-detail .{{camel_case to_referenceable.name}}Hash=${record.signed_action.hashed.hash} style="margin-bottom: 16px;"></{{kebab_case to_referenceable.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural to_referenceable.name)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (records) => this.renderList(records),
      error: (e: any) => html`<span>Error fetching the {{lower_case (plural to_referenceable.name)}}: ${e.data.data}.</span>`
    });
  }
}
