<script lang="ts">
import { onMount, getContext } from 'svelte';
import '@material/mwc-circular-progress';
import { decode } from '@msgpack/msgpack';
import { Record, EntryHash, ActionHash, AgentPubKey, AppAgentClient } from '@holochain/client';
import { clientContext } from '../../contexts';
import {{pascal_case to_referenceable.name}}Detail from './{{pascal_case to_referenceable.name}}Detail.svelte';

export let {{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}};

let client: AppAgentClient = getContext(clientContext).getClient();

let records: Array<Record> | undefined;

let loading = true;
let error: any = undefined;

$: records, loading, error;

onMount(async () => {  
  try {
    records = await client.callZome({
      cap_secret: null,
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}',
      payload: {{camel_case from_referenceable.singular_arg}},
    });
  } catch (e) {
    error = e;
  }
  loading = true;
});

</script>

{#if loading }
<div style="display: flex; flex: 1; align-items: center; justify-content: center">
  <mwc-circular-progress indeterminate></mwc-circular-progress>
</div>
{:else if error}
<span>Error fetching {{lower_case (plural to_referenceable.name)}}: {error.data.data}.</span>
{:else if records.length === 0}
<span>No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}.</span>
{:else}
<div style="display: flex; flex-direction: column">
  {#each records as record}
    <{{pascal_case to_referenceable.name}}Detail {{camel_case to_referenceable.name}}Hash={record.signed_action.hashed.hash} style="margin-bottom: 8px;"></{{pascal_case to_referenceable.name}}Detail>
  {/each}
</div>
{/if}
