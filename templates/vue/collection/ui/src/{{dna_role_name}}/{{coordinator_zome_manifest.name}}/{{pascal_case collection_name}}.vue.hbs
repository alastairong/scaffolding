<template>
  <div v-if="loading" style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>

  <div v-else style="display: flex; flex-direction: column">
    <span v-if="error">Error fetching the {{lower_case (plural referenceable.name)}}: {{{{raw}}}} {{error.data.data}}.{{{{/raw}}}}</span>
    <div v-else-if="records && records.length > 0">
      <{{pascal_case referenceable.name}}Detail 
        v-for="record in records" 
        :{{kebab_case referenceable.name}}-hash="record.signed_action.hashed.hash"
        @{{kebab_case referenceable.name}}-deleted="fetch{{pascal_case referenceable.name}}()"
        style="margin-bottom: 8px">
      </{{pascal_case referenceable.name}}Detail>
    </div>
    <span v-else>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</span>
  </div>

</template>

<script lang="ts">
import { defineComponent, inject, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppAgentClient, Record, AgentPubKey, EntryHash, ActionHash } from '@holochain/client';
import '@material/mwc-circular-progress';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.vue';

export default defineComponent({
  components: {
    {{pascal_case referenceable.name}}Detail
  },
  props: { {{#if (eq collection_type.type "ByAuthor")}}
    author: {
      type: Object,
      required: true
    } {{/if}}
  },
  data(): { records: Array<Record> | undefined; loading: boolean; error: any } {
    return {
      records: undefined,
      loading: true,
      error: undefined
    }
  },
  async mounted() {
    await this.fetch{{pascal_case referenceable.name}}();
  },
  methods: {
    async fetch{{pascal_case referenceable.name}}() {
      try {
        this.records = await this.client.callZome({
          cap_secret: null,
          role_name: '{{dna_role_name}}',
          zome_name: '{{coordinator_zome_manifest.name}}',
          fn_name: 'get_{{snake_case collection_name}}',
          payload: {{#if (eq collection_type.type "ByAuthor")}}this.author{{else}}null{{/if}},
        });
      } catch (e) {
        this.error = e;
      }
      this.loading = false;
    }
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppAgentClient>).value;
    return {
      client,
    };
  },
})
</script>
