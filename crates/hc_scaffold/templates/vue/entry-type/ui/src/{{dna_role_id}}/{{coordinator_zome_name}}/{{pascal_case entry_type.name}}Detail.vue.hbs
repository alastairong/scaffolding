/<template>
  <div v-if="{{camel_case entry_type.name}}" style="display: flex; flex-direction: column">
    <span style="font-size: 18px">{{pascal_case entry_type.name}}</span>
	
	{{#each entry_type.fields}}
	  {{> (concat field_type.type "/detail/render") entry_type=../entry_type field_name=@key field_type=this}}
	{{/each}}
  </div>

  <div v-else style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>

</template>

<script lang="ts">
import { defineComponent, inject, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { InstalledCell, AppWebsocket, InstalledAppInfo, Record } from '@holochain/client';
import { {{pascal_case entry_type.name}} } from './{{kebab_case entry_type.name}}';
import '@material/mwc-circular-progress';
{{#each entry_type.fields}}
{{> (concat field_type.type "/detail/imports") }}
{{/each}}

export default defineComponent({
  props: {
    actionHash: {
      type: Object,
      required: true
    }
  },
  data(): { {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} | undefined } {
    return {
      {{camel_case entry_type.name}}: undefined
    }
  },
  async mounted() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

    const record: Record | undefined = await this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: cellData.cell_id,
      zome_name: '{{coordinator_zome_name}}',
      fn_name: 'get_{{snake_case entry_type.name}}',
      payload: this.actionHash,
      provenance: cellData.cell_id[1]
    });
    
    if (record) {
      this.{{camel_case entry_type.name}} = decode((record.entry as any).Present.entry) as {{pascal_case entry_type.name}};
    }
  },
  setup() {
    const appWebsocket = (inject('appWebsocket') as ComputedRef<AppWebsocket>).value;
    const appInfo = (inject('appInfo') as ComputedRef<InstalledAppInfo>).value;
    return {
      appInfo,
      appWebsocket,
    };
  },
})
</script>
