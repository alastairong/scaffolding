<template>
  <mwc-snackbar ref="update-error"></mwc-snackbar>

  <div style="display: flex; flex-direction: column">
    <span style="font-size: 18px">Edit {{title_case entry_type.name}}</span>
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector") )}}
    {{> (concat field_type "/" widget "/edit/render") label=(title_case field_name) initial_value_variable=(concat "current" pascal_case ../entry_type.name "." (camel_case field_name) ) variable_to_change=(concat "" (camel_case field_name) ) required=(eq cardinality "single")}}
    {{else}}
    {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
  {{/if}}
{{/each}}


    <div style="display: flex; flex-direction: row">
      <mwc-button
        outlined
        label="Cancel"
        @click="$emit('edit-canceled')"
        style="flex: 1;"
      ></mwc-button>
      <mwc-button 
        raised
        label="Save"
        :disabled="!is{{pascal_case entry_type.name}}Valid"
        @click="update{{pascal_case entry_type.name}}"
        style="flex: 1;"
      ></mwc-button>
    </div>
  </div>
</template>
<script lang="ts">
import { defineComponent, inject, ComputedRef } from 'vue';
import { InstalledCell, AppWebsocket, InstalledAppInfo, Record, AgentPubKey, EntryHash, ActionHash } from '@holochain/client';
import { {{pascal_case entry_type.name}} } from './types';
import '@material/mwc-button';
import '@material/mwc-snackbar';
import { decode } from '@msgpack/msgpack';
import { Snackbar } from '@material/mwc-snackbar';
{{#each entry_type.fields}}
{{> (concat field_type.type "/edit/imports") }}

{{/each}}

export default defineComponent({
  data(): {
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector" ) )}}
    {{camel_case field_name}}: {{> (concat field_type "/type")}};
    {{else}}
    {{camel_case field_name}}: Array<{{> (concat field_type "/type")}} | undefined>;
    {{/if}}
  {{/if}}
{{/each}}
  } {
    return { 
      {{#each entry_type.fields}}
        {{#if widget}}
          {{#if (not (eq cardinality "vector" ) )}}
      {{camel_case field_name}}: () => this.current{{pascal_case ../entry_type.name}}().{{camel_case field_name}},
          {{else}}
      {{camel_case field_name}}: () => this.current{{pascal_case ../entry_type.name}}().{{camel_case field_name}},
          {{/if}}
        {{/if}}
      {{/each}}
    }
  },
  props: {
{{#if link_from_original_to_each_update}}
    original{{pascal_case entry_type.name}}Hash: {
      type: null,
      required: true,
    },
{{/if}}
    currentRecord: {
      type: Object,
      required: true
    }
  },
  computed: {
    current{{pascal_case entry_type.name}}() {
      return decode((this.currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
    },
    is{{pascal_case entry_type.name}}Valid() {
      return true{{#each entry_type.fields}}{{#if widget}} && {{#if (eq cardinality "single")}}this.{{camel_case field_name}}{{/if}}{{#if (eq cardinality "vector")}}this.{{camel_case field_name}}.all(e => e !== undefined){{/if}}{{/if}}{{/each}};
    },
  },
  methods: {
    async update{{pascal_case entry_type.name}}() {
      const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

      const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (eq cardinality "single") }}
        {{snake_case field_name}}: this.{{camel_case field_name}}!,
    {{else}}
        {{snake_case field_name}}: this.{{camel_case field_name}},
    {{/if}}
  {{/if}}
{{/each}}
{{#each entry_type.fields}}
  {{#if (not widget)}}
        {{snake_case field_name}}: this.current{{pascal_case ../entry_type.name}}().{{snake_case field_name}},
  {{/if}}
{{/each}}
      };

      try {
        const updateRecord: Record = await this.appWebsocket.callZome({
          cap_secret: null,
          cell_id: cellData.cell_id,
          zome_name: '{{coordinator_zome_manifest.name}}',
          fn_name: 'update_{{snake_case entry_type.name}}',
          payload: {
{{#if link_from_original_to_each_update}}
            original_{{snake_case entry_type.name}}_hash: this.original{{pascal_case entry_type.name}}Hash,
{{/if}}
            previous_{{snake_case entry_type.name}}_hash: this.currentRecord.signed_action.hashed.hash,
            updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
          },
          provenance: cellData.cell_id[1]
        });
        this.$emit('{{kebab_case entry_type.name}}-updated', updateRecord.signed_action.hashed.hash);
      } catch (e: any) {
        const errorSnackbar = this.$refs['update-error'] as Snackbar;
        errorSnackbar.labelText = `Error updating the {{lower_case entry_type.name}}: ${e.data.data}`;
        errorSnackbar.show();
      }
    },
  },
  emits: ['{{kebab_case entry_type.name}}-updated', 'edit-canceled'],
  setup() {
    const appWebsocket = (inject('appWebsocket') as ComputedRef<AppWebsocket>).value;
    const appInfo = (inject('appInfo') as ComputedRef<InstalledAppInfo>).value;
    return {
      appInfo,
      appWebsocket,
    };
  },
})
</script>
