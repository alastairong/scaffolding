<template>
  <div v-if="loading" style="display: flex; flex-direction: column">
    <span v-if="error">Error fetching the {{lower_case (plural referenceable.name)}}: {{{{raw}}}} {{error.data.data}}.{{{{/raw}}}}</span>
    <div v-else-if="hashes.length > 0">
      <{{pascal_case referenceable.name}}Detail 
        v-for="hash in hashes" 
        :{{kebab_case referenceable.name}}-hash="hash" 
        style="margin-bottom: 8px">
      </{{pascal_case referenceable.name}}Detail>
    </div>
    <span v-else>No {{lower_case (plural referenceable.name)}} found for.</span>
  </div>

  <div v-else style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>

</template>

<script lang="ts">
import { defineComponent, inject, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { InstalledCell, AppWebsocket, InstalledAppInfo, Record, AgentPubKey, EntryHash, ActionHash } from '@holochain/client';
import '@material/mwc-circular-progress';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.vue';

export default defineComponent({
  components: {
    {{pascal_case referenceable.name}}Detail
  },
  props: { {{#if (eq index_type.type "ByAuthor")}}
    author: {
      type: Object,
      required: true
    } {{/if}}
  },
  data(): { hashes: Array<{{referenceable.hash_type}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: true,
      error: undefined
    }
  },
  async mounted() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

    try {
      this.hashes = await this.appWebsocket.callZome({
        cap_secret: null,
        cell_id: cellData.cell_id,
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case index_name}}',
        payload: {{#if (eq index_type.type "ByAuthor")}}this.author{{else}}null{{/if}},
        provenance: cellData.cell_id[1]
      });
    } catch (e) {
      this.error = e;
    }
    this.loading = false;
  },
  setup() {
    const appWebsocket = (inject('appWebsocket') as ComputedRef<AppWebsocket>).value;
    const appInfo = (inject('appInfo') as ComputedRef<InstalledAppInfo>).value;
    return {
      appInfo,
      appWebsocket,
    };
  },
})
</script>
