import { LitElement, html } from 'lit';
import { state, customElement } from 'lit/decorators.js';
import { InstalledCell, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { appWebsocketContext, appInfoContext } from '../../../contexts';
import { ${upperFirst(camelCase(type.name))} } from '../../../types/${dnaName}/${zomeName}';
import '@material/mwc-button';
${uniq(flatten(type.fields?.map(f => fieldImports(typescriptGenerators, elementsImports, f)))).join('\n')}

@customElement('create-{{kebab_entry_type_name)}}')
export class Create${upperFirst(camelCase(type.name))} extends LitElement {

  ${type.fields
    ?.map(
      f => `  @state()
  _${camelCase(f.name)}: ${typescriptGenerators[f.type].referenceType} | undefined;`,
    )
    .join('\n\n')}

  is${upperFirst(camelCase(type.name))}Valid() {
    return ${Object.values(type.fields)
      .map(f => `this._${camelCase(f.name)}`)
      .join(' && \n      ')};
  }

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  async create${upperFirst(camelCase(type.name))}() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '${dnaName}')!;

    const ${camelCase(type.name)}: ${upperFirst(camelCase(type.name))} = {
      ${type.fields.map(field => fieldProperty(elementsImports, field)).join('\n        ')}
    };

    const actionHash = await this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: cellData.cell_id,
      zome_name: '${zomeName}',
      fn_name: 'create_${snakeCase(type.name)}',
      payload: ${camelCase(type.name)},
      provenance: cellData.cell_id[1]
    });

    this.dispatchEvent(new CustomEvent('${kebabCase(type.name)}-created', {
      composed: true,
      bubbles: true,
      detail: {
        actionHash
      }
    }));
  }

  render() {
    return html\`
      <div style="display: flex; flex-direction: column">
        <span style="font-size: 18px">Create ${upperFirst(camelCase(type.name))}</span>

        ${type.fields.map(f => createFieldTemplate(elementsImports, f)).join('\n\n        ')}

        <mwc-button 
          label="Create ${upperFirst(camelCase(type.name))}"
          .disabled=\${!this.is${upperFirst(camelCase(type.name))}Valid()}
          @click=\${() => this.create${upperFirst(camelCase(type.name))}()}
        ></mwc-button>
    </div>\`;
  }
}
