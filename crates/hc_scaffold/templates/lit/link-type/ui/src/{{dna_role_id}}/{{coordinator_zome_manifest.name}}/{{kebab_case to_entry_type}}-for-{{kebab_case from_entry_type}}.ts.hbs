import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { InstalledCell, AgentPubKey, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { appWebsocketContext, appInfoContext } from '../../contexts';
import '@material/mwc-circular-progress';
import './{{kebab_case to_entry_type}}-detail';

@customElement('{{kebab_case to_entry_type}}-for-{{kebab_case from_entry_type}}')
export class {{pascal_case to_entry_type}}For{{pascal_case from_entry_type}} extends LitElement {

  @property({
    hasChanged: (newVal: ActionHash, oldVal: ActionHash) => newVal.toString() !== oldVal.toString()
  })
  {{camel_case from_entry_type}}Hash!: ActionHash; 

  _fetch{{pascal_case to_entry_type}}: Task<[ActionHash], Array<ActionHash>> = new Task(this, ([{{camel_case from_entry_type}}Hash]) => this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: this.cellData.cell_id,
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case to_entry_type}}_for_{{snake_case from_entry_type}}',
      payload: {{camel_case from_entry_type}}Hash,
      provenance: this.cellData.cell_id[1]
  }), [this.{{camel_case from_entry_type}}]);

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  get cellData() {
    return this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;
  }

  renderList(actionHashes: Array<ActionHash>) {
    if (actionHashes.length === 0) return html`<span>No {{lower_case to_entry_type}} found for this {{lower_case from_entry_type}}</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${actionHashes.map(actionHash => 
          html`<{{kebab_case to_entry_type}}-detail .{{camel_case to_entry_type}}Hash=${actionHash} style="margin-bottom: 16px;"></{{kebab_case to_entry_type}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case entry_type.plural_name}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (actionHashes) => this.renderList(actionHashes),
      error: (e) => html`<span>Error fetching the {{lower_case (lookup entry_types 0)}}: ${e.message}.</span>`
    });
  }
}
