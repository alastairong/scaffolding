import { LitElement, html } from 'lit';
import { state, customElement } from 'lit/decorators.js';
import { InstalledCell, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { deserializeHash } from '@holochain-open-dev/utils';
import { contextProvided } from '@lit-labs/context';
import { appWebsocketContext, appInfoContext } from '../../contexts';
import './{{kebab_case entry_type.name}}-detail';

@customElement('{{kebab_case entry_type.name}}-for-{{kebab_case (lookup @index depends_on)}}')
export class {{pascal_case entry_type.name}}For{{pascal_case (lookup @index depends_on)}} extends LitElement {

  @property()
  actionHash: string; // This must be a base 64 serialized string to be compatible with the automatic Lit updates 

  @state()
  _allRecords: Array<Record> | undefined;

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  async firstUpdated() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

    const records: Array<Record> = await this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: cellData.cell_id,
      zome_name: '{{coordinator_zome_name}}',
      fn_name: '{{snake_case entry_type.name}}',
      payload: {{#if (eq index_type "ByAuthor")}}deserializeHash(this.author){{else}}null{{/if}},
      provenance: cellData.cell_id[1]
    });
  }

  render() {
    if (!this._allRecords) {
      return html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`;
    }
    return html`
      <div style="display: flex; flex-direction: column">
        ${this._allRecords.map(r => 
          html`<{{kebab_case entry_type.name}} .actionHash=${r.signed_action.hashed.hash}></{{kebab_case entry_type.name}}>`
        )}
      </div>
    `;
  }
}
