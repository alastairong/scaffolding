import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, AgentPubKey, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { appWebsocketContext, appInfoContext } from '../../contexts';
import '@material/mwc-circular-progress';
{{#each entry_types}}
import './{{kebab_case this}}-detail';
{{/each}}

@customElement('{{kebab_case index_name}}')
export class {{pascal_case index_name}} extends LitElement {
  {{#if (eq index_type.type "ByAuthor")}}

  @property({
    hasChanged: (newVal: ActionHash, oldVal: ActionHash) => newVal.toString() !== oldVal.toString()
  })
  author!: AgentPubKey;
  {{/if}}
  
  _fetch{{pascal_case (lookup entry_types 0)}}: Task<[ActionHash], Array<ActionHash>> = new Task(this, ([{{#if (eq index_type.type "ByAuthor")}}author{{/if}}]) => this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: this.cellData.cell_id,
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case index_name}}',
      payload: {{#if (eq index_type.type "ByAuthor")}}author{{else}}null{{/if}},
      provenance: this.cellData.cell_id[1]
  }), [{{#if (eq index_type.type "ByAuthor")}}this.author{{/if}}]);

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;
  
  get cellData() {
    return this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;
  }

  renderList(actionHashes: Array<ActionHash>) {
    if (actionHashes.length === 0) return html`<span>No {{lower_case (lookup entry_types 0)}} found.</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${actionHashes.map(actionHash => 
          html`<{{kebab_case (lookup entry_types 0)}}-detail .{{camel_case (lookup entry_types 0)}}Hash=${actionHash} style="margin-bottom: 16px;"></{{kebab_case (lookup entry_types 0)}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (lookup entry_types 0)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (actionHashes) => this.renderList(actionHashes),
      error: (e) => html`<span>Error fetching the {{lower_case (lookup entry_types 0)}}: ${e.message}.</span>`
    });
  }
}
